// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NZWalks.Data;

#nullable disable

namespace NZWalks.Migrations
{
    [DbContext(typeof(NZWalksDbContext))]
    [Migration("20250616120834_seeding data for difficulties and regions")]
    partial class seedingdatafordifficultiesandregions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NZWalks.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbb3f82a-75c1-4da1-8d49-6d4150ac282c"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("d17a6c5d-e4c1-47e1-a44f-3f66fadacacf"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("8b49f4b7-7b4b-4da5-97ca-a31e5d5f1ae3"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("NZWalks.Models.Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ae3ac41-dc46-414c-b41a-a49f7e81446a"),
                            Code = "NZ",
                            Name = "North Zone",
                            RegionImageUrl = "https://example.com/images/north.jpg"
                        },
                        new
                        {
                            Id = new Guid("a81f4b3a-2f49-4fc2-97b2-1c8b2aa921d5"),
                            Code = "SZ",
                            Name = "South Zone",
                            RegionImageUrl = "https://example.com/images/south.jpg"
                        },
                        new
                        {
                            Id = new Guid("cf98235f-f190-4bfc-8714-cf5792df1707"),
                            Code = "EZ",
                            Name = "East Zone",
                            RegionImageUrl = "https://example.com/images/east.jpg"
                        },
                        new
                        {
                            Id = new Guid("62f72a79-f438-43b1-bb1b-d679e223d50b"),
                            Code = "WZ",
                            Name = "West Zone",
                            RegionImageUrl = "https://example.com/images/west.jpg"
                        },
                        new
                        {
                            Id = new Guid("11ac579d-7f6f-4e90-a12e-c6a5f8bbebbb"),
                            Code = "CZ",
                            Name = "Central Zone",
                            RegionImageUrl = "https://example.com/images/central.jpg"
                        });
                });

            modelBuilder.Entity("NZWalks.Models.Domain.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("NZWalks.Models.Domain.Walk", b =>
                {
                    b.HasOne("NZWalks.Models.Domain.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NZWalks.Models.Domain.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
